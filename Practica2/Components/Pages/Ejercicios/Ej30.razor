@page "/ej/30"
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer

<PageTitle>Ejercicio 30</PageTitle>

<h3><strong>Ejercicio 30</strong></h3>

<h5><strong>Función que recibe un vector de 10 posiciones enteras y retorna la posición del mayor almacenado.</strong></h5>

<div class="form-group">
    <label for="vectorInput">Ingrese los 10 números enteros separados por comas:</label>
    <input type="text" @bind="vectorInput" class="form-control" id="vectorInput" />
</div>

<div class="mx-auto mt-3">
    <button class="btn btn-primary" @onclick="FindMaxPosition">Encontrar Posición del Mayor</button>
</div>

@if (result.HasValue)
{
    <div class="form-group mt-2">  
        <label for="resultOutput">Posición del Mayor:</label>
        <input type="text" class="form-control" id="resultOutput" value="@result.Value" readonly />
    </div>
}
else if (ErrorMessage != null)
{
    <p style="color:red">@ErrorMessage</p>
}

@code {
    private string vectorInput = string.Empty;
    private int? result;
    private string? ErrorMessage { get; set; }

    private void FindMaxPosition()
    {
        ErrorMessage = null;
        result = null;

        
        var numbers = vectorInput.Split(',')
                                  .Select(n => n.Trim())
                                  .Where(n => !string.IsNullOrEmpty(n))
                                  .Select(n => 
                                  {
                                      int value;
                                      return int.TryParse(n, out value) ? (int?)value : null;
                                  })
                                  .ToList();

        if (numbers.Count == 10 && numbers.All(n => n.HasValue))
        {
            // Encontrar la posición del mayor valor en el vector
            int maxIndex = 0;
            int maxValue = numbers[0].Value;

            for (int i = 1; i < numbers.Count; i++)
            {
                if (numbers[i].Value > maxValue)
                {
                    maxValue = numbers[i].Value;
                    maxIndex = i;
                }
            }

            result = maxIndex;
        }
        else
        {
            ErrorMessage = "Por favor, ingresa exactamente 10 números enteros válidos separados por comas.";
        }
    }
}
