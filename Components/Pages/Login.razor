@page "/login"
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject UserService userService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Inicio de Sesión</h3>

<EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="LoginForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="form-group">
        <label for="usuario">Usuario</label>
        <InputText id="usuario" class="form-control" @bind-Value="loginModel.Usuario" placeholder="Ingrese su usuario" />
    </div>
    
    <div class="form-group">
        <label for="clave">Contraseña</label>
        <InputText id="clave" class="form-control" @bind-Value="loginModel.Clave" placeholder="Ingrese su contraseña" type="password" />
    </div>
    
    <button type="submit" class="btn btn-primary mt-3">Iniciar Sesión</button>
</EditForm>

<p class="text-danger mt-2">@errorMessage</p>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage = string.Empty;
    private User? authenticatedUser;
    private bool isUserAuthenticated = false;

    private async Task HandleLogin()
    {
        try
        {
            // Intentamos autenticar al usuario
            authenticatedUser = await userService.Login(loginModel.Usuario, loginModel.Clave);

            if (authenticatedUser != null)
            {
                errorMessage = string.Empty;
                isUserAuthenticated = true;

                // Guardamos el ID del usuario en LocalStorage solo después de la autenticación exitosa
                await LocalStorage.SetItemAsync("UserId", authenticatedUser.Id);

                // Redirigimos a la página Home
                Navigation.NavigateTo("/home");
            }
            else
            {
                errorMessage = "Credenciales incorrectas. Intente de nuevo.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Ocurrió un error al intentar iniciar sesión.";
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Solo intentamos interactuar con LocalStorage después de que el componente se haya renderizado
                if (isUserAuthenticated && authenticatedUser != null)
                {
                    await LocalStorage.SetItemAsync("UserId", authenticatedUser.Id);
                    Console.WriteLine("ID del usuario almacenado en LocalStorage.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al guardar en LocalStorage: {ex.Message}");
            }
        }
    }

    private class LoginModel
    {
        public string? Usuario { get; set; }
        public string? Clave { get; set; }
    }
}
