@page "/calendario"
@inject DetenidoService DetenidoService
@using System.Globalization
@rendermode InteractiveServer

<h3 class="text-center my-4">Calendario de Detenciones</h3>

<div class="calendar-container">
    <div class="calendar-header">
        <button class="calendar-button" @onclick="MostrarMesAnterior">&lt;</button>
        <h4>@mesActual.ToString("MMMM yyyy", CultureInfo.InvariantCulture)</h4>
        <button class="calendar-button" @onclick="MostrarMesSiguiente">&gt;</button>
    </div>

    <table class="table table-bordered calendar-table">
        <thead>
            <tr>
                <th>Lun</th>
                <th>Mar</th>
                <th>Mié</th>
                <th>Jue</th>
                <th>Vie</th>
                <th>Sáb</th>
                <th>Dom</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var week in semanasCalendario)
            {
                <tr>
                    @foreach (var dia in week)
                    {
                        <td @onclick="() => VerDetencionesDia(dia.Fecha)">
                            <span class="fw-bold">@dia.Dia</span>
                            @if (dia.Detenciones > 0)
                            {
                                <span class="detenciones-count">@dia.Detenciones</span>
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>

@if (detenidosDelDia != null)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <span class="close" @onclick="CerrarModal">&times;</span>
            <h4 class="text-center">Detenciones del @fechaSeleccionada.ToString("dd/MM/yyyy")</h4>
            <ul class="list-unstyled">
                @foreach (var detenido in detenidosDelDia)
                {
                    <li>@detenido.Nombre</li>
                }
            </ul>
        </div>
    </div>
}

@code {
    private DateTime mesActual = DateTime.Now;
    private List<List<CalendarioDia>> semanasCalendario = new();
    private List<Detenido>? detenidosDelDia;
    private DateTime fechaSeleccionada;

    protected override void OnInitialized()
    {
        GenerarCalendario(mesActual);
    }

    private void GenerarCalendario(DateTime mes)
    {
        semanasCalendario.Clear();

        var primerDiaDelMes = new DateTime(mes.Year, mes.Month, 1);
        var primerDiaDeLaSemana = primerDiaDelMes.AddDays(-(int)primerDiaDelMes.DayOfWeek);

        var diasDelMes = new List<CalendarioDia>();
        for (var dia = primerDiaDeLaSemana; dia <= primerDiaDelMes.AddMonths(1).AddDays(-1); dia = dia.AddDays(1))
        {
            diasDelMes.Add(new CalendarioDia
            {
                Fecha = dia,
                Dia = dia.Day,
                Detenciones = DetenidoService.ObtenerDetencionesPorFecha(dia.Date).Count()
            });

            if (diasDelMes.Count == 7)
            {
                semanasCalendario.Add(diasDelMes);
                diasDelMes = new List<CalendarioDia>();
            }
        }

        if (diasDelMes.Count > 0)
        {
            semanasCalendario.Add(diasDelMes);
        }
    }

    private void MostrarMesAnterior()
    {
        mesActual = mesActual.AddMonths(-1);
        GenerarCalendario(mesActual);
    }

    private void MostrarMesSiguiente()
    {
        mesActual = mesActual.AddMonths(1);
        GenerarCalendario(mesActual);
    }

    private void VerDetencionesDia(DateTime fecha)
    {
        fechaSeleccionada = fecha;
        detenidosDelDia = DetenidoService.ObtenerDetencionesPorFecha(fecha).ToList();
    }

    private void CerrarModal()
    {
        detenidosDelDia = null;
    }

    public class CalendarioDia
    {
        public DateTime Fecha { get; set; }
        public int Dia { get; set; }
        public int Detenciones { get; set; }
    }
}
<style>
    .calendar-container {
        width: 80%;
        margin: 0 auto;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .calendar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .calendar-button {
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 10px;
        cursor: pointer;
        font-size: 18px;
    }

    .calendar-button:hover {
        background-color: #0056b3;
    }

    .calendar-table {
        width: 100%;
        margin-top: 20px;
        border-collapse: collapse;
    }

    .calendar-table th,
    .calendar-table td {
        padding: 15px;
        text-align: center;
        border: 1px solid #ddd;
    }

    .calendar-table th {
        background-color: #f1f1f1;
        font-weight: bold;
    }

    .calendar-table td {
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .calendar-table td:hover {
        background-color: #f0f0f0;
    }

    .detenciones-count {
        background-color: #ff4747;
        color: white;
        border-radius: 50%;
        padding: 2px 8px;
        font-size: 14px;
        margin-left: 5px;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 999;
    }

    .modal-content {
        background-color: white;
        padding: 20px;
        border-radius: 10px;
        width: 400px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .close {
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 24px;
        cursor: pointer;
    }

    .close:hover {
        color: red;
    }

    h4 {
        margin-bottom: 20px;
    }

    ul {
        list-style-type: none;
        padding-left: 0;
    }

    ul li {
        padding: 5px 0;
    }
</style>
