@page "/"
@page "/home"
@inject VivenciaService vivenciaService
@inject UserService userService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@rendermode InteractiveServer

<h3>Mis Vivencias</h3>

<EditForm Model="newVivencia" OnValidSubmit="HandleVivenciaSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="titulo" class="form-control" @bind-Value="newVivencia.Titulo" placeholder="Título de la vivencia" />
    <InputTextArea id="descripcion" class="form-control" @bind-Value="newVivencia.Descripcion" placeholder="Descripción" />
    <InputDate id="fecha" class="form-control" @bind-Value="newVivencia.Fecha" />

    <InputFile OnChange="HandleFileSelected" />

    <button type="submit" class="btn btn-primary">Guardar Vivencia</button>
</EditForm>

<hr />

<h4>Mis Vivencias Registradas</h4>
@if (userVivencias?.Any() == true)
{
    <div class="row">
        @foreach (var vivencia in userVivencias)
        {
            <div class="col-md-4">
                <div class="card">
                    <img src="@(!string.IsNullOrEmpty(vivencia.Imagen) ? $"/images/{vivencia.Imagen}" : "/images/default-user.jpg")"
                        class="card-img-top" alt="Foto de vivencia" />
                    <div class="card-body">
                        <h5 class="card-title">@vivencia.Titulo</h5>
                        <p class="card-text">@vivencia.Descripcion</p>
                        <p class="card-text"><small class="text-muted">@vivencia.Fecha.ToString("dd/MM/yyyy")</small></p>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No tienes vivencias registradas.</p>
}

<hr />

<h3>Botón de Pánico 🚨</h3>
<EditForm Model="peligro" OnValidSubmit="HandlePanicButton">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <InputText id="usuario" class="form-control" @bind-Value="peligro.Usuario" placeholder="Ingresa tu usuario" />
    </div>
    <div class="form-group">
        <InputText id="clave" class="form-control" @bind-Value="peligro.Clave" placeholder="Ingresa tu clave para confirmar" type="password" />
    </div>
    <button type="submit" class="btn btn-danger mt-2">Eliminar Todas Mis Vivencias</button>
</EditForm>

@if (panicMessage != null)
{
    <p class="alert alert-danger mt-3">@panicMessage</p>
}

@code {
    private Vivencia newVivencia = new Vivencia();
    private List<Vivencia> userVivencias = new();
    private Peligro peligro = new();
    private string? panicMessage;
    private bool isInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            isInitialized = true;
            await InitializeData();
        }
    }

    private async Task InitializeData()
    {
        int userId = await GetLoggedInUserIdAsync();
        if (userId > 0)
        {
            userVivencias = await vivenciaService.GetVivenciasByUser(userId);
            StateHasChanged();
        }
    }

    private async Task<int> GetLoggedInUserIdAsync()
    {
        try
        {
            var userId = await LocalStorage.GetItemAsync<int>("UserId");
            return userId > 0 ? userId : 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error obteniendo el ID del usuario: {ex.Message}");
            return 0;
        }
    }

    private async Task HandleVivenciaSubmit()
    {
        if (newVivencia.UsuarioId <= 0)
        {
            newVivencia.UsuarioId = await GetLoggedInUserIdAsync();
        }

        await vivenciaService.SaveVivencia(newVivencia);

        userVivencias = await vivenciaService.GetVivenciasByUser(newVivencia.UsuarioId);
        newVivencia = new Vivencia(); // Resetear el formulario
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var fileName = $"{Guid.NewGuid()}_{file.Name}";
        var filePath = Path.Combine("wwwroot/images", fileName);

        Directory.CreateDirectory("wwwroot/images");

        using (var stream = new FileStream(filePath, FileMode.Create))
        {
            await file.OpenReadStream().CopyToAsync(stream);
        }

        newVivencia.Imagen = fileName;
    }

    private async Task HandlePanicButton()
    {
        panicMessage = null;

        try
        {
            var userId = await GetLoggedInUserIdAsync();
            if (userId == 0)
            {
                panicMessage = "Usuario no autenticado. Inicia sesión nuevamente.";
                return;
            }

            var user = await userService.Login(peligro.Usuario, peligro.Clave);
            if (user == null || user.Id != userId)
            {
                panicMessage = "Usuario o clave incorrecta.";
                return;
            }

            await userService.DeleteAllVivenciasByUser(userId);
            panicMessage = "¡Todas tus vivencias han sido eliminadas!";
            userVivencias.Clear();
        }
        catch (Exception ex)
        {
            panicMessage = $"Ocurrió un error: {ex.Message}";
        }
    }

    private class Peligro
    {
        public string? Usuario { get; set; }
        public string? Clave { get; set; }
    }
}
